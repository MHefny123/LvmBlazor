@*// ToDoList.razor*@



@page "/todolist"

@using BlazorLVM.Data
@using BlazorLVM.Services
@using BlazorLVM.Models
@using BlazorLVM.Pages

@inject ToDoListService service
@inject IJSRuntime jsRuntime

<h1>To Do List</h1>

<p>This component demonstrates fetching data from Database.</p>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Task</th>
                <th>Status</th>
                <th>Due Date</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var toDoItem in toDoList)
            {
                <tr>
                    <td>@toDoItem.Name</td>
                    <td>@toDoItem.Status</td>
                    <td>@toDoItem.DueDate.ToShortDateString()</td>
                    @*<td><input type="button" class="btn btn-primary" value="Edit" /></td>*@
                    <td><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(toDoItem))" data-toggle="modal" data-target="#taskModal" value="Edit" /></td>
                    @*<td><input type="button" class="btn btn-danger" value="Delete" /></td>*@
                    <td><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(toDoItem))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" /></td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Add Task" />
</div>


@*<TaskDetail TaskObject=taskObject></TaskDetail>*@


<ConfirmDialog OnClick="@Delete" />
<TaskDetail TaskObject=taskObject DataChanged="@DataChanged">
    <customHeader>@customHeader</customHeader>
</TaskDetail>



@code {
    List<BlazorLVM.Models.ToDo> toDoList;
    BlazorLVM.Models.ToDo taskObject = new Models.ToDo();


    string customHeader = "Add New"; // string.Empty;





    protected override async Task OnInitializedAsync()
    {
        toDoList = await service.Get();
    }




    private async void DataChanged()
    {
        toDoList = await service.Get();
        StateHasChanged();
    }




    private void InitializeTaskObject()
    {
        customHeader = "Add New Task";
        taskObject = new BlazorLVM.Models.ToDo();
        taskObject.DueDate = DateTime.Now;

    }

    private void PrepareForEdit(BlazorLVM.Models.ToDo task)
    {
        customHeader = "Edit Task";
        taskObject = task;
    }



    private void PrepareForDelete(BlazorLVM.Models.ToDo task)
    {
        taskObject = task;
    }

    private async Task Delete()
    {
        var task = await service.Delete(taskObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        toDoList = await service.Get();
        taskObject = new BlazorLVM.Models.ToDo();
    }
}
